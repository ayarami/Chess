CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: 
        color:        { value: [1, 1, 1, 1], inspector: { type: color } }
        color2:       { value: [1, 1, 1, 1], inspector: { type: color } }
        angle:        { value: 30.0}
        maxDistance:  { value: 1}
        minDistance:  { value: 0}
        tilingOffset: { value: [1, 1, 0, 0] }
        mainTexture:  { value: grey         }
}%

CCProgram unlit-vs %{
  precision mediump float;
  #include <cc-global>
  #include <cc-local>
  #include <input>


  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;
  #endif

  #if USE_COLOR
    in vec2 a_texCoord;
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  highp vec4 vert () {
    vec4 position;
    CCVertInput(position);

    highp vec4 pos = cc_matProj * (cc_matView * cc_matWorld) * position;

    #if USE_COLOR
      v_uv = a_texCoord;
      #if FLIP_UV
        v_uv.y = 1.0 - v_uv.y;
      #endif
      v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return pos;
  }
}%

CCProgram unlit-fs %{
  precision mediump float;
  #include <output>

  #if USE_COLOR
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  #if USE_COLOR
    uniform Constant {
      vec4 color;
      vec4 color2;
      float angle;
      float maxDistance;
      float minDistance;
    };
  #endif

  #if USE_VERTEX_COLOR
    in vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 nocolor = vec4(0,0,0,0);

    #if USE_COLOR
      o *= texture(mainTexture, v_uv);
    #endif

    #if USE_COLOR
      
      #if USE_TESTA
        vec2 d = vec2(v_uv.x - 0.5, v_uv.y - 0.5);
        float distance = sqrt(d.x * d.x + d.y * d.y);
        if(distance > maxDistance / 2.0 || distance < minDistance / 2.0) {
          o *= color2;
        }
        else {
          o *= color;
        }
        vec2 n = vec2(0, 0.5);
        float acosAngle = acos(dot(d,n)/(sqrt(d.x * d.x + d.y * d.y) * sqrt(n.x * n.x + n.y * n.y)));
        if(abs(acosAngle * 180.0 / 3.14159) > angle / 2.0) {
          o *= color2;
        }
        
      #else
        o *= color;
      #endif
    #endif

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif




    return CCFragOutput(o);
  }
}%
