// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs:vert
      frag: standard-fs:frag
      properties: &props
        tilingOffset:  { value: [1.0, 1.0, 0.0, 0.0] }
        albedo:        { value: [1.0, 1.0, 1.0, 1.0], inspector: { type: color } }
        albedoScale:   { value: [1.0, 1.0, 1.0, 0.0] }
        pbrParams:     { value: [0.8, 0.6, 1.0, 1.0] }
        pbrScale:      { value: [1.0, 1.0, 1.0, 1.0] }
        emissive:      { value: [0.0, 0.0, 0.0, 1.0], inspector: { type: color } }
        emissiveScale: { value: [1.0, 1.0, 1.0, 1.0] }
        albedoMap:     { value: grey         }
        normalMap:     { value: normal       }
        pbrMap:        { value: grey         }
        roughnessMap:  { value: grey         }
        metallicRoughnessMap: { value: grey  }
        occlusionMap:  { value: white        }
        emissiveMap:   { value: grey         }
  - name: transparent
    passes:
    - vert: standard-vs:vert
      frag: standard-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
    vec4 albedo;
    vec4 albedoScale;   // xyz: albedo scale, w: cutoff
    vec4 pbrParams;     // xyz: roughness/metallic/occlusion (specific permutation follows CHANNEL macros)
    vec4 pbrScale;      // xyz: roughness/metallic/occlusion scales, w: normal scale
    vec4 emissive;
    vec4 emissiveScale;
  };
}%

CCProgram standard-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>
  #include <shared-ubos>

  #if USE_VERTEX_COLOR
    in vec3 a_color;
    out vec3 v_color;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  #if USE_NORMAL_MAP
    out vec3 v_tangent;
    out vec3 v_bitangent;
  #endif

  #if USE_ALBEDO_MAP || USE_NORMAL_MAP || USE_PBR_MAP || USE_EMISSIVE_MAP || USE_METALLIC_ROUGHNESS_MAP || USE_OCCLUSION_MAP
    in vec2 a_texCoord;
    out vec2 v_uv;
  #endif

  highp vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    highp mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    highp vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    #if USE_NORMAL_MAP
      v_tangent = normalize((matWorldIT * vec4(In.tangent.xyz, 0.0)).xyz);
      v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order
    #endif

    #if USE_ALBEDO_MAP || USE_NORMAL_MAP || USE_PBR_MAP || USE_EMISSIVE_MAP || USE_METALLIC_ROUGHNESS_MAP || USE_OCCLUSION_MAP
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram standard-fs %{
  precision highp float;
  #include <cc-global>
  #include <shading-standard>
  #include <output-standard>
  #include <gamma>
  #include <shared-ubos>

  in vec3 v_position;

  #if USE_ALBEDO_MAP || USE_NORMAL_MAP || USE_PBR_MAP || USE_EMISSIVE_MAP || USE_METALLIC_ROUGHNESS_MAP || USE_OCCLUSION_MAP
    in vec2 v_uv;
  #endif

  #if USE_VERTEX_COLOR
    in vec3 v_color;
  #endif

  in vec3 v_normal;
  #if USE_NORMAL_MAP
    in vec3 v_tangent;
    in vec3 v_bitangent;
  #endif

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
  #endif
  #if USE_NORMAL_MAP
    uniform sampler2D normalMap;
  #endif
  #if USE_PBR_MAP
    uniform sampler2D pbrMap;
  #endif
  #if USE_METALLIC_ROUGHNESS_MAP
    uniform sampler2D roughnessMap;
    uniform sampler2D metallicRoughnessMap;
  #endif
  #if USE_OCCLUSION_MAP
    uniform sampler2D occlusionMap;
  #endif
  #if USE_EMISSIVE_MAP
    uniform sampler2D emissiveMap;
  #endif

  #pragma define ROUGHNESS_CHANNEL options([r, g, b])
  #pragma define METALLIC_CHANNEL  options([g, r, b])
  #pragma define OCCLUSION_CHANNEL options([b, r, g])
  #if USE_ALPHA_TEST
    #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  void surf (out StandardSurface s) {
    vec4 baseColor = albedo;
    #if USE_VERTEX_COLOR
      baseColor.rgb *= v_color;
    #endif
    #if USE_ALBEDO_MAP
      vec4 texColor = texture(albedoMap, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      baseColor *= texColor;
    #endif
    s.albedo = baseColor;
    s.albedo.rgb *= albedoScale.xyz;

    #if USE_ALPHA_TEST
      if (s.albedo.ALPHA_TEST_CHANNEL < albedoScale.w) discard;
    #endif

    s.normal = v_normal;
    #if USE_NORMAL_MAP
      vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);
      s.normal =
        (nmmp.x * pbrScale.w) * normalize(v_tangent) +
        (nmmp.y * pbrScale.w) * normalize(v_bitangent) +
        nmmp.z * normalize(s.normal);
    #endif

    s.position = v_position;

    vec4 pbr = pbrParams;
    #if USE_PBR_MAP
      pbr = texture(pbrMap, v_uv);
    #endif
    #if USE_METALLIC_ROUGHNESS_MAP
      vec4 roughness = texture(roughnessMap, v_uv);
      vec4 metallicRoughness = texture(metallicRoughnessMap, v_uv);
      pbr.METALLIC_CHANNEL = roughness.METALLIC_CHANNEL;
      pbr.ROUGHNESS_CHANNEL = metallicRoughness.ROUGHNESS_CHANNEL;
    #endif
    #if USE_OCCLUSION_MAP
      pbr.OCCLUSION_CHANNEL = texture(occlusionMap, v_uv).OCCLUSION_CHANNEL;
    #endif
    pbr *= pbrScale;
    s.roughness = clamp(pbr.ROUGHNESS_CHANNEL, 0.04, 1.0);
    s.metallic = clamp(pbr.METALLIC_CHANNEL, 0.0, 0.96);
    s.occlusion = pbr.OCCLUSION_CHANNEL;

    s.emissive = emissive.rgb * emissiveScale.xyz;
    #if USE_EMISSIVE_MAP
      s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);
    #endif
  }

  vec4 frag () {
    StandardSurface s; surf(s);
    vec4 color = CCStandardShading(s);
    return CCFragOutput(color);
  }
}%
